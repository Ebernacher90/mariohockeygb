; -------------------------------------------------------------------------------------------
; Cut 06
; -------------------------------------------------------------------------------------------
cut06:
        ; Load Mario sprite info into the sprite buffer
        ld      hl, mario01_sprite_data
        ld      de, SPRITE_BUFFER
        ld      bc, mario01_sprite_data_size
        call    mem_CopyVRAM
        call    DMA_TRANSFER

        ; Load Mario tiles
        ld      hl, mario01_tile_data
        ld      de, _VRAM + bowser01_tile_data_size 
        ld      bc, mario01_tile_data_size
        call    mem_CopyVRAM                    ; load tile data

        ; Load Bowser tiles
        ld      hl, bowser01_tile_data
        ld      de, _VRAM                       ; $8000
        ld      bc, bowser01_tile_data_size     ; 128 tiles
        call    mem_CopyVRAM                    ; load tile data

        ; Load Bowser Map data
        ld      a, 0
        ld      de, _SCRN0
        ld      hl, bowser01_map_data
        ld      bc, SCRN_VX_B * SCRN_VY_B
        call    mem_CopyVRAM

        ; Move screen position
        ld      a, 160
        ld      [rSCX], a
        ld      a, 0
        ld      [rSCY], a

        ; Enable Sprites
        ld      a, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJ8|LCDCF_OBJON
        ld      [rLCDC], a

        ; Trigger FadeIn Animation
        ld      de,FadeInHandler
        call    SetAnimationHandler
        call    WaitAnimation

        ; Trigger Scroll Animation
        ld      de,ScrollW
        call    SetAnimationHandler
        call    WaitAnimation

        ; Wait a bit
        ld      de,ShortDelayHandler
        call    SetAnimationHandler
        call    WaitAnimation

        ; Trigger FadeOut Animation
        ld      de,FadeOutHandler
        call    SetAnimationHandler
        call    WaitAnimation

        ret

; -------------------------------------------------------------------------------------------
; Scroll screen NW for Cut 3
; -------------------------------------------------------------------------------------------
ScrollW:
        push    af
        ld      a,[ANIMATION_ACTIVE]    ; Check if animation is active
        jp      z, .return
        ;ld      a,[FRAME_COUNTER+1]
        ;and     %00000001               ; Update every 2 ticks
        ;jp      nz, .return
        ld      a,[rSCX]
        dec     a
        dec     a
        jp      z, .stop_animation
        ld      [rSCX], a

        ; Move sprites to left. Intentionally unrolled. Could be done
        ; with a loop. TODO: Maybe not needed to unroll?
        ; row 1
OFFSET  SET     0
        REPT    40
        ld      a,[SPRITE_BUFFER+OFFSET+1]
        dec     a
        dec     a
        ld      [SPRITE_BUFFER+OFFSET+1], a
OFFSET  SET     OFFSET + 4
        ENDR
        
        ; Copy sprites buffer to OAM via DMA
        call    DMA_TRANSFER
        jp      .return
.stop_animation
        xor     a                       ; Done. Turn off animation
        ld      [ANIMATION_ACTIVE],a
.return
        pop     af
        ret


; vim: se ts=8 sw=8 expandtab:
